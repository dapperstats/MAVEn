library(tidy)
getwd()
# load source files
source("../../Github reorganization/database_Conestogo/src/sondeinterpolationplot.R")
# load source files
source("../Desktop/Github reorganization/database_Conestogo/src/sondeinterpolationplot.R")
interp.plot
sonde.dat <- read.csv("C:/Users/Megan/Desktop/Github reorganization/formbloom_conestogo_20172018EDA/2019_Sonde_Data.csv")
head(sonde.dat)
tail(sonde.dat)
str(sonde.dat)
sonde.dat <- read.csv("C:/Users/Megan/Desktop/Github reorganization/formbloom_conestogo_20172018EDA/2019_Sonde_Data.csv") %>%
mutate(Date = as.Date(Date), station = "clc")
str(sonde.dat)
sonde.dat <- read.csv("C:/Users/Megan/Desktop/Github reorganization/formbloom_conestogo_20172018EDA/2019_Sonde_Data.csv") %>%
mutate(Date = as.Date(Date, format = "%d/%m/%Y"), station = "clc")
str(sonde.dat)
head(sonde.dat)
require(MBA); require(tidyverse); require(reshape); require(viridis); require(lubridate)
max(sonde.dat$DEP_m)
interp.local <- function(df = "", site.id = "", variable = "",
doy.start = "", doy.end = "",
scale.start = "", scale.end = ""){
require(MBA); require(tidyverse); require(reshape); require(viridis); require(lubridate)
mba <- mba.surf(df %>%
ungroup() %>%
filter(station == site.id) %>%
mutate(DOY = yday(Date)) %>%
select(DOY, DEP_m, variable) %>%
na.omit(), 100, 100)
dimnames(mba$xyz.est$z) <- list(mba$xyz.est$x, mba$xyz.est$y)
df3 <- melt(mba$xyz.est$z, varnames = c('DOY', 'depth'), value = 'value')
fig <- ggplot(data = df3, aes(DOY, depth))+
geom_rect(aes(xmin = doy.start, xmax = doy.end, ymin = 18.2, ymax = 0), fill = "grey50") +
#geom_raster(aes(fill = value), interpolate = F, hjust = 0.5, vjust = 0.5) +
#geom_contour(aes(z = value), color = "white", alpha = 0.4, size = 0.8) +
geom_raster(aes(fill = value), interpolate = F, hjust = 0.5, vjust = 0.5) +
geom_contour(aes(z = value), color = "white", alpha = 0.4, size = 0.8) +
geom_point(data = df %>% filter(station == site.id), aes(DOY, DEP_m),
col = "black", alpha= 0.8, size = 1.25, shape = 1)  +
geom_point(data = df %>% filter(station == site.id), aes(DOY, DEP_m),
col = "grey75", alpha= 0.8, size = 1.15, shape = 20)  +
scale_fill_viridis(limits = c(scale.start, scale.end), alpha = 1,
direction = 1, discrete = F, option = "D",
name = variable) +
scale_y_reverse() +
xlim(doy.start, doy.end) +
labs(x = "Day of Year", y = "Depth (m)") +
theme_bw()
return(fig)
}
min(yday(sonde.dat$Date))
colnames(sonde.dat)
min((sonde.dat$Chl_ug.L))
max((sonde.dat$Chl_ug.L))
max(yday(sonde.dat$Date))
interp.local(df = sonde.dat, doy.start = min(yday(sonde.dat$Date)), doy.end = max(yday(sonde.dat$Date)),
scale.start = 0, scale.end = 20, variable = "Chl_ug.L")
interp.local(df = sonde.dat, doy.start = min(yday(sonde.dat$Date)), doy.end = max(yday(sonde.dat$Date)),
scale.start = 0, scale.end = 20, variable = "Chl_ug.L", site.id = "clc")
df = sonde.dat
df %>%
ungroup() %>%
filter(station == site.id)
site.id = "clc"
df %>%
ungroup() %>%
filter(station == site.id)
df %>%
ungroup() %>%
filter(station == site.id) %>%
mutate(DOY = yday(Date))
variable = "Chl_ug.L"
df %>%
ungroup() %>%
filter(station == site.id) %>%
mutate(DOY = yday(Date)) %>%
select(DOY, DEP_m, variable)
interp.local <- function(df = "", site.id = "", variable = "",
doy.start = "", doy.end = "",
scale.start = "", scale.end = ""){
require(MBA); require(tidyverse); require(reshape); require(viridis); require(lubridate)
mba <- mba.surf(df %>%
ungroup() %>%
filter(station == site.id) %>%
mutate(DOY = yday(Date)) %>%
select(DOY, DEP_m, variable) %>%
na.omit(), 100, 100)
dimnames(mba$xyz.est$z) <- list(mba$xyz.est$x, mba$xyz.est$y)
df3 <- melt(mba$xyz.est$z, varnames = c('DOY', 'depth'), value = 'value')
fig <- ggplot(data = df3, aes(DOY, depth))+
geom_rect(aes(xmin = doy.start, xmax = doy.end, ymin = 18.2, ymax = 0), fill = "grey50") +
#geom_raster(aes(fill = value), interpolate = F, hjust = 0.5, vjust = 0.5) +
#geom_contour(aes(z = value), color = "white", alpha = 0.4, size = 0.8) +
geom_raster(aes(fill = value), interpolate = F, hjust = 0.5, vjust = 0.5) +
geom_contour(aes(z = value), color = "white", alpha = 0.4, size = 0.8) +
geom_point(data = df %>% filter(station == site.id), aes(yday(Date), DEP_m),
col = "black", alpha= 0.8, size = 1.25, shape = 1)  +
geom_point(data = df %>% filter(station == site.id), aes(yday(Date), DEP_m),
col = "grey75", alpha= 0.8, size = 1.15, shape = 20)  +
scale_fill_viridis(limits = c(scale.start, scale.end), alpha = 1,
direction = 1, discrete = F, option = "D",
name = variable) +
scale_y_reverse() +
xlim(doy.start, doy.end) +
labs(x = "Day of Year", y = "Depth (m)") +
theme_bw()
return(fig)
}
interp.local(df = sonde.dat, doy.start = min(yday(sonde.dat$Date)), doy.end = max(yday(sonde.dat$Date)),
scale.start = 0, scale.end = 20, variable = "Chl_ug.L", site.id = "clc")
chl <- interp.local(df = sonde.dat, doy.start = min(yday(sonde.dat$Date)), doy.end = max(yday(sonde.dat$Date)),
scale.start = 0, scale.end = 20, variable = "Chl_ug.L", site.id = "clc")
colnames(sonde.dat)
interp.local <- function(df = "", site.id = "", variable = "",
doy.start = "", doy.end = "",
scale.start = "", scale.end = ""){
require(MBA); require(tidyverse); require(reshape); require(viridis); require(lubridate)
mba <- mba.surf(df %>%
ungroup() %>%
filter(station == site.id) %>%
mutate(DOY = yday(Date)) %>%
select(DOY, DEP_m, variable) %>%
na.omit(), 100, 100)
dimnames(mba$xyz.est$z) <- list(mba$xyz.est$x, mba$xyz.est$y)
df3 <- melt(mba$xyz.est$z, varnames = c('DOY', 'depth'), value = 'value')
fig <- ggplot(data = df3, aes(DOY, depth))+
geom_rect(aes(xmin = doy.start, xmax = doy.end, ymin = 18.2, ymax = 0), fill = "grey50") +
#geom_raster(aes(fill = value), interpolate = F, hjust = 0.5, vjust = 0.5) +
#geom_contour(aes(z = value), color = "white", alpha = 0.4, size = 0.8) +
geom_raster(aes(fill = value), interpolate = F, hjust = 0.5, vjust = 0.5) +
geom_contour(aes(z = value), color = "white", alpha = 0.4, size = 0.8) +
geom_point(data = df %>% filter(station == site.id), aes(yday(Date), DEP_m),
col = "black", alpha= 0.8, size = 1.25, shape = 1)  +
geom_point(data = df %>% filter(station == site.id), aes(yday(Date), DEP_m),
col = "grey75", alpha= 0.8, size = 1.15, shape = 20)  +
scale_fill_viridis(limits = c(scale.start, scale.end), alpha = 1,
direction = 1, discrete = F, option = "D",
name = variable) +
scale_y_reverse() +
xlim(doy.start, doy.end) +
labs(x = "Day of Year", y = "Depth (m)") +
theme_bw()
#return(fig)
}
chl <- interp.local(df = sonde.dat, doy.start = min(yday(sonde.dat$Date)), doy.end = max(yday(sonde.dat$Date)),
scale.start = 0, scale.end = 20, variable = "Chl_ug.L", site.id = "clc")
print(cla)
print(chl)
max(sonde.dat$BGA_PC_ug.L)
min(sonde.dat$BGA_PC_ug.L)
bga <- interp.local(df = sonde.dat, doy.start = min(yday(sonde.dat$Date)), doy.end = max(yday(sonde.dat$Date)),
scale.start = 0, scale.end = 1.1, variable = "BGA_PC_ug.L", site.id = "clc")
bga
library(cowplot)
plot_grid(chl, bga, nrow = 1, labels = "auto")
temp <- interp.local(df = sonde.dat, doy.start = min(yday(sonde.dat$Date)), doy.end = max(yday(sonde.dat$Date)),
scale.start = min(sonde.dat$Temp_C), scale.end = max(sonde.dat$Temp_C),
variable = "Temp_C", site.id = "clc")
do <- interp.local(df = sonde.dat, doy.start = min(yday(sonde.dat$Date)), doy.end = max(yday(sonde.dat$Date)),
scale.start = min(sonde.dat$DO_mg.L), scale.end = max(sonde.dat$DO_mg.L),
variable = "DO_mg.L", site.id = "clc")
plot_grid(temp, do, nrow = 1, labels = "auto")
min(sonde.dat$DO_mg.L)
do <- interp.local(df = sonde.dat, doy.start = min(yday(sonde.dat$Date)), doy.end = max(yday(sonde.dat$Date)),
scale.start = 0, scale.end = max(sonde.dat$DO_mg.L),
variable = "DO_mg.L", site.id = "clc")
plot_grid(temp, do, nrow = 1, labels = "auto")
do <- interp.local(df = sonde.dat, doy.start = min(yday(sonde.dat$Date)), doy.end = max(yday(sonde.dat$Date)),
scale.start = -0.5, scale.end = max(sonde.dat$DO_mg.L),
variable = "DO_mg.L", site.id = "clc")
plot_grid(temp, do, nrow = 1, labels = "auto")
plot_grid(chl, bga, temp, do, labels = "auto")
?plot_grid
plot_grid(chl, bga, temp, do, labels = "auto", align = "hv")
fig <- ggplot(data = df3, aes(DOY, depth))+
geom_rect(aes(xmin = doy.start, xmax = doy.end, ymin = 18.2, ymax = 0), fill = "grey50") +
#geom_raster(aes(fill = value), interpolate = F, hjust = 0.5, vjust = 0.5) +
#geom_contour(aes(z = value), color = "white", alpha = 0.4, size = 0.8) +
geom_raster(aes(fill = value), interpolate = F, hjust = 0.5, vjust = 0.5) +
geom_contour(aes(z = value), color = "white", alpha = 0.4, size = 0.8) +
geom_point(data = df %>% filter(station == site.id), aes(yday(Date), DEP_m),
col = "black", alpha= 0.8, size = 1.25, shape = 1)  +
geom_point(data = df %>% filter(station == site.id), aes(yday(Date), DEP_m),
col = "grey75", alpha= 0.8, size = 1.15, shape = 20)  +
scale_fill_viridis(limits = c(scale.start, scale.end), alpha = 1,
direction = 1, discrete = F, option = "C",
name = variable) +
scale_y_reverse() +
xlim(doy.start, doy.end) +
labs(x = "Day of Year", y = "Depth (m)") +
theme_bw()
interp.local <- function(df = "", site.id = "", variable = "",
doy.start = "", doy.end = "",
scale.start = "", scale.end = ""){
require(MBA); require(tidyverse); require(reshape); require(viridis); require(lubridate)
mba <- mba.surf(df %>%
ungroup() %>%
filter(station == site.id) %>%
mutate(DOY = yday(Date)) %>%
select(DOY, DEP_m, variable) %>%
na.omit(), 100, 100)
dimnames(mba$xyz.est$z) <- list(mba$xyz.est$x, mba$xyz.est$y)
df3 <- melt(mba$xyz.est$z, varnames = c('DOY', 'depth'), value = 'value')
fig <- ggplot(data = df3, aes(DOY, depth))+
geom_rect(aes(xmin = doy.start, xmax = doy.end, ymin = 18.2, ymax = 0), fill = "grey50") +
#geom_raster(aes(fill = value), interpolate = F, hjust = 0.5, vjust = 0.5) +
#geom_contour(aes(z = value), color = "white", alpha = 0.4, size = 0.8) +
geom_raster(aes(fill = value), interpolate = F, hjust = 0.5, vjust = 0.5) +
geom_contour(aes(z = value), color = "white", alpha = 0.4, size = 0.8) +
geom_point(data = df %>% filter(station == site.id), aes(yday(Date), DEP_m),
col = "black", alpha= 0.8, size = 1.25, shape = 1)  +
geom_point(data = df %>% filter(station == site.id), aes(yday(Date), DEP_m),
col = "grey75", alpha= 0.8, size = 1.15, shape = 20)  +
scale_fill_viridis(limits = c(scale.start, scale.end), alpha = 1,
direction = 1, discrete = F, option = "C",
name = variable) +
scale_y_reverse() +
xlim(doy.start, doy.end) +
labs(x = "Day of Year", y = "Depth (m)") +
theme_bw()
#return(fig)
}
chl <- interp.local(df = sonde.dat, doy.start = min(yday(sonde.dat$Date)), doy.end = max(yday(sonde.dat$Date)),
scale.start = 0, scale.end = 20, variable = "Chl_ug.L", site.id = "clc")
print(chl)
bga <- interp.local(df = sonde.dat, doy.start = min(yday(sonde.dat$Date)), doy.end = max(yday(sonde.dat$Date)),
scale.start = 0, scale.end = 1.1, variable = "BGA_PC_ug.L", site.id = "clc")
plot_grid(chl, bga, nrow = 1, labels = "auto")
temp <- interp.local(df = sonde.dat, doy.start = min(yday(sonde.dat$Date)), doy.end = max(yday(sonde.dat$Date)),
scale.start = min(sonde.dat$Temp_C), scale.end = max(sonde.dat$Temp_C),
variable = "Temp_C", site.id = "clc")
do <- interp.local(df = sonde.dat, doy.start = min(yday(sonde.dat$Date)), doy.end = max(yday(sonde.dat$Date)),
scale.start = -0.5, scale.end = max(sonde.dat$DO_mg.L),
variable = "DO_mg.L", site.id = "clc")
plot_grid(temp, do, nrow = 1, labels = "auto")
plot_grid(chl, bga, temp, do, labels = "auto", align = "hv")
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, results = "hide")
## install.packages("ggplot2")
library(lubridate)
library(chron)
library(tidyverse)
library(trend)
library(gridExtra)
library(extrafont)
library(viridis)
library(scales)
library(lemon)
library(pracma)
library(pander)
library(cowplot)
# load source code
source("./src/themeformatting.R")
theme_set(theme_pub())
dat <- read.csv(file.choose())
head(dat)
col.names <- c("datetime","temp_3.5m", "temp_3.0m","temp_1.5m")
dat <- dat[2:nrow(dat), 1:4]
head(dat)
dat <- read.csv(file.choose())
head(dat)
str(dat)
dat.sub <- dat[2:nrow(dat), 1:4]
dat.sub
head(dat.sub)
colnames(dat.sub) <- col.names
head(dat.sub)
str(dat.sub)
dat.sub <- dat.sub %>%
mutate(datetime = as.Date(datetime, format = "%Y-%m-%d %H:%M"),
temp_3.5m = as.numeric(temp_3.5m),
temp_3.0m = as.numeric(temp_3.0m),
temp_1.5m = as.numeric(temp_1.5m))
library(tidyverse)
dat.sub <- dat.sub %>%
mutate(datetime = as.Date(datetime, format = "%Y-%m-%d %H:%M"),
temp_3.5m = as.numeric(as.character(temp_3.5m)),
temp_3.0m = as.numeric(as.character(temp_3.0m)),
temp_1.5m = as.numeric(as.character(temp_1.5m)))
str(dat.sub)
head(dat.sub)
dat.sub <- dat.sub %>%
mutate(datetime = as.Date(datetime, format = "%Y-%m-%d%H:%M"),
temp_3.5m = as.numeric(as.character(temp_3.5m)),
temp_3.0m = as.numeric(as.character(temp_3.0m)),
temp_1.5m = as.numeric(as.character(temp_1.5m)))
head(dat.sub)
?ad.Date
?as.Date
dat.sub <- dat.sub %>%
mutate(datetime = as.Date(datetime, format = "%Y-%m-%d %H:%M", tz = "UTC"),
temp_3.5m = as.numeric(as.character(temp_3.5m)),
temp_3.0m = as.numeric(as.character(temp_3.0m)),
temp_1.5m = as.numeric(as.character(temp_1.5m)))
?as.Date
head(dat.sub)
head(dat)
dat.sub <- dat.sub %>%
mutate(datetime = as.Date.POSIXct(datetime, format = "%Y-%m-%d %H:%M", tz = "UTC"),
temp_3.5m = as.numeric(as.character(temp_3.5m)),
temp_3.0m = as.numeric(as.character(temp_3.0m)),
temp_1.5m = as.numeric(as.character(temp_1.5m)))
head(dat.sub)
head(dat)
dat.sub <- dat.sub %>%
mutate(datetime = as.Date.POSIXct(datetime, origin = "2017-06-30 09:00", format = "%Y-%m-%d %H:%M", tz = "UTC"),
temp_3.5m = as.numeric(as.character(temp_3.5m)),
temp_3.0m = as.numeric(as.character(temp_3.0m)),
temp_1.5m = as.numeric(as.character(temp_1.5m)))
head(dat.sub)
dat.sub <- dat.sub %>%
mutate(datetime = as.Date.POSIXlt(datetime, origin = "2017-06-30 09:00", format = "%Y-%m-%d %H:%M", tz = "UTC"),
temp_3.5m = as.numeric(as.character(temp_3.5m)),
temp_3.0m = as.numeric(as.character(temp_3.0m)),
temp_1.5m = as.numeric(as.character(temp_1.5m)))
View(df)
knitr::opts_chunk$set(echo = TRUE)
library("ggspatial")
library(tidyverse)
library("ggspatial")
ggplot(data = world) +
geom_sf() +
annotation_scale(location = "bl", width_hint = 0.5) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering) +
coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97))
install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel",
"ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata")
install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel",
"ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata"))
install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel", "ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata"))
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel",
"ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata"))
install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel", "ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata"))
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
library(tidyverse)
library(ggplot2)
install.packages(c("ade4TkGUI", "AlgDesign", "amap", "apcluster", "aplpack", "aqp", "arules", "backports", "BART", "basefun", "bayesm", "BB", "BDgraph", "biglasso", "BiocManager", "BiodiversityR", "BMA", "bmixture", "broom", "calibrate", "callr", "car", "CARBayes", "carData", "cartogram", "cartography", "caTools", "chron", "circlize", "classInt", "cleangeo", "cli", "ClusterR", "clusterSim", "coin", "ContaminatedMixt", "covr", "crul", "cubature", "curl", "data.table", "dbscan", "deldir", "dendextend", "deSolve", "devtools", "digest", "doFuture", "doParallel", "DoseFinding", "e1071", "earth", "effects", "ElemStatLearn", "ellipsis", "emmeans", "energy", "extRemes", "factoextra", "FactoMineR", "farver", "fclust", "fields", "foreach", "forecast", "foreign", "fracdiff", "future", "gamair", "gamlss", "gamlss.dist", "gdtools", "gee", "geepack", "geojsonio", "geometa", "geometry", "geonapi", "geosapi", "ggfortify", "ggpubr", "ggsignif", "gld", "GLDEX", "glmnet", "GlobalOptions", "globals", "GMCM", "gmm", "goftest", "grf", "gstat", "h2o", "haven", "HDclassif", "heatmaply", "hexbin", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "icenReg", "igraph", "IMIFA", "indicspecies", "infer", "inlmisc", "installr", "ipdw", "iterators", "JADE", "jomo", "jpeg", "kernlab", "kiwisR", "knitr", "kohonen", "ks", "labdsv", "lambda.r", "landscapemetrics", "later", "lava", "leaflet", "leafpop", "libcoin", "limSolve", "listenv", "loa", "LogicReg", "lpSolve", "magclass", "mapmisc", "maptools", "markdown", "marked", "matrixStats", "MCMCpack", "MetabolAnalyze", "metacom", "mice", "microbenchmark", "miscTools", "missMDA", "MixAll", "mixsmsn", "mlr", "mlt", "mockery", "modelr", "MoEClust", "monomvn", "multcomp", "multicool", "MXM", "ncdf4", "network", "nFactors", "nlme", "oai", "openair", "openxlsx", "ows4R", "ParamHelpers", "partitions", "pbapply", "pbdMPI", "pbdSLAP", "pkgbuild", "pkgconfig", "plm", "plotKML", "plotly", "plotmo", "plotrix", "pls", "plyr", "polycor", "popbio", "postGIStools", "PReMiuM", "primer", "prodlim", "promises", "protolite", "purrr", "pvclust", "quadprog", "quantreg", "R.oo", "R.utils", "R6", "RandomFields", "randomForestSRC", "rangeMapper", "raster", "rasterVis", "Rborist", "Rcmdr", "rcosmo", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppGSL", "RcppParallel", "rebmix", "recipes", "relations", "reticulate", "retistruct", "Rfast", "Rfast2", "rgbif", "rgdal", "rgeos", "rgl", "RgoogleMaps", "rgrass7", "ritis", "rjags", "rje", "rlang", "rlecuyer", "Rmalschains", "RMark", "rmarkdown", "RMAWGEN", "RNetCDF", "RNeXML", "RNifti", "rotl", "roxygen2", "rpart.plot", "RPMG", "rpostgis", "rrcov", "RSNNS", "RSpectra", "RSQLite", "rvest", "RWeka", "RWekajars", "RXshrink", "satellite", "scales", "secr", "segmented", "selectr", "sensitivity", "seqinr", "seriation", "sf", "shiny", "SIS", "slam", "smerc", "sna", "solrium", "sp", "spam", "SparseM", "SpatialExtremes", "SpatialNP", "spatialreg", "spatstat", "spatstat.utils", "spData", "spdep", "spmoran", "spsurvey", "ssgraph", "stars", "stplanr", "strucchange", "SuperLearner", "surveillance", "survival", "synchrony", "sys", "taxize", "tensorflow", "testthat", "tidyr", "tidyverse", "tinytex", "tmap", "trtf", "TTR", "units", "unmarked", "uroot", "vcr", "vegan", "VGAM", "vioplot", "visNetwork", "weathercan", "webmockr", "webshot", "whisker", "wkb", "xfun", "xgboost", "xml2", "zCompositions", "zip"))
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
libryar(tidyverse)
library(tidyverse)
library("ggspatial")
ggplot(data = world) +
geom_sf() +
annotation_scale(location = "bl", width_hint = 0.5) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering) +
coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97))
?annotation_scale
ggplot(data = world) +
geom_sf() +
annotation_scale(location = "bl", width_hint = 0.5) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering) +
coord_sf(xlim = c(-80.82, -80.64), ylim = c(43.66, 43.77))
ggplot(data = world) +
geom_sf(fill= “antiquewhite”) +
geom_text(data= world_points,aes(x=X, y=Y, label=name),
color = “darkblue”, fontface = “bold”, check_overlap = FALSE) +
annotate(geom = “text”, x = -90, y = 26, label = “Gulf of Mexico”, fontface = “italic”, color = “grey22”, size = 6) +
annotation_scale(location = “bl”, width_hint = 0.5) +
annotation_north_arrow(location = “bl”, which_north = “true”, pad_x = unit(0.75, “in”),
pad_y = unit(0.5, “in”), style = north_arrow_fancy_orienteering) +
coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97), expand = FALSE) +
xlab(“Longitude”) +
ylab(“Latitude”) +
ggtitle(“Map of the Gulf of Mexico and the Caribbean Sea”) +
theme(panel.grid.major = element_line(color = gray(.5),
linetype = “dashed”, size = 0.5),
panel.background = element_rect(fill = “aliceblue”))
ggplot(data = world) +
geom_sf(fill= “antiquewhite”) +
geom_text(data= world_points,aes(x=X, y=Y, label=name),
color = “darkblue”, fontface = “bold”, check_overlap = FALSE) +
annotate(geom = “text”, x = -90, y = 26, label = “Gulf of Mexico”, fontface = “italic”, color = “grey22”, size = 6) +
annotation_scale(location = “bl”, width_hint = 0.5) +
annotation_north_arrow(location = “bl”, which_north = “true”, pad_x = unit(0.75, “in”),
pad_y = unit(0.5, “in”), style = north_arrow_fancy_orienteering) +
coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97), expand = FALSE) +
xlab(“Longitude”) +
ylab(“Latitude”) +
ggtitle(“Map of the Gulf of Mexico and the Caribbean Sea”) +
theme(panel.grid.major = element_line(color = gray(.5),
linetype = “dashed”, size = 0.5),
panel.background = element_rect(fill = “aliceblue”))
ggplot(data = world) +
geom_sf(fill= “antiquewhite”)
myLocation <- c(-80.82, 43.66, -80.64, , 43.77)
myMap <- get_map(location=myLocation,
ggmap(myMap)
myLocation <- c(-80.82, 43.66, -80.64, 43.77)
myMap <- get_map(location=myLocation,
myMap <- get_map(location=myLocation, source="stamen", maptype="watercolor", crop=FALSE)
library(ggmap)
myMap <- get_map(location=myLocation, source="stamen", maptype="watercolor", crop=FALSE)
myLocation <- c(-80.82, 43.66, -80.64, 43.77)
myMap <- get_map(location=myLocation, source="stamen", maptype="watercolor", crop=FALSE)
ggmap(myMap)
library("sf")
ggplot(data = world) +
geom_sf(fill= “antiquewhite”)
ggplot(data = world) +
geom_sf(fill= "antiquewhite") +
geom_text(data= world_points,aes(x=X, y=Y, label=name),
color = "darkblue", fontface = "bold", check_overlap = FALSE) +
annotate(geom = "text", x = -90, y = 26, label = "Gulf of Mexico", fontface = "italic", color = "grey22", size = 6) +
annotation_scale(location = "bl", width_hint = 0.5) +
annotation_north_arrow(location = "bl", which_north = "true", pad_x = unit(0.75, "in"),
pad_y = unit(0.5, "in"), style = north_arrow_fancy_orienteering) +
coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97), expand = FALSE) +
xlab("Longitude") +
ylab("Latitude") +
ggtitle("Map of the Gulf of Mexico and the Caribbean Sea") +
theme(panel.grid.major = element_line(color = gray(.5),
linetype = “dashed”, size = 0.5),
panel.background = element_rect(fill = “aliceblue”))
ggplot(data = world) +
geom_sf(fill= "antiquewhite") +
geom_text(data= world_points,aes(x=X, y=Y, label=name),
color = "darkblue", fontface = "bold", check_overlap = FALSE) +
annotate(geom = "text", x = -90, y = 26, label = "Gulf of Mexico", fontface = "italic", color = "grey22", size = 6) +
annotation_scale(location = "bl", width_hint = 0.5) +
annotation_north_arrow(location = "bl", which_north = "true", pad_x = unit(0.75, "in"),
pad_y = unit(0.5, "in"), style = north_arrow_fancy_orienteering) +
coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97), expand = FALSE) +
xlab("Longitude") +
ylab("Latitude") +
ggtitle("Map of the Gulf of Mexico and the Caribbean Sea") +
theme(panel.grid.major = element_line(color = gray(.5),
linetype = "dashed", size = 0.5),
panel.background = element_rect(fill = "aliceblue"))
ggplot(data = world) +
geom_sf(fill= "antiquewhite") +
#geom_text(data= world_points,aes(x=X, y=Y, label=name),
#          color = "darkblue", fontface = "bold", check_overlap = FALSE) +
annotate(geom = "text", x = -90, y = 26, label = "Gulf of Mexico", fontface = "italic", color = "grey22", size = 6) +
annotation_scale(location = "bl", width_hint = 0.5) +
annotation_north_arrow(location = "bl", which_north = "true", pad_x = unit(0.75, "in"),
pad_y = unit(0.5, "in"), style = north_arrow_fancy_orienteering) +
coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97), expand = FALSE) +
xlab("Longitude") +
ylab("Latitude") +
ggtitle("Map of the Gulf of Mexico and the Caribbean Sea") +
theme(panel.grid.major = element_line(color = gray(.5),
linetype = "dashed", size = 0.5),
panel.background = element_rect(fill = "aliceblue"))
ggmap(myMap) +
annotation_scale(location = "bl", width_hint = 0.5) +
annotation_north_arrow(location = "bl", which_north = "true", pad_x = unit(0.75, "in"),
pad_y = unit(0.5, "in"), style = north_arrow_fancy_orienteering)
myMap
p <- ggmap(myMap) +
annotation_scale(location = "bl", width_hint = 0.5) +
geom_sf(fill= "antiquewhite") +
annotation_north_arrow(location = "bl", which_north = "true", pad_x = unit(0.75, "in"),
pad_y = unit(0.5, "in"), style = north_arrow_fancy_orienteering)
p <- ggmap(myMap)
p+ annotation_scale(location = "bl", width_hint = 0.5) +
geom_sf(fill= "antiquewhite") +
annotation_north_arrow(location = "bl", which_north = "true", pad_x = unit(0.75, "in"),
pad_y = unit(0.5, "in"), style = north_arrow_fancy_orienteering)
p
p+ annotation_scale(location = "bl", width_hint = 0.5)
?rnaturalearth
?rnaturalearthdata
myMap <- get_map(location=myLocation, source="osm", crop=FALSE)
ggmap(myMap)
myMap <- get_map(location=myLocation, source="osm", crop=FALSE)
ggmap(myMap)
myMap <- get_map(location=myLocation, source="osm", source=“osm", color=“bw”, crop=FALSE)
myMap <- get_map(location=myLocation, source="osm", color="bw", crop=FALSE)
ggmap(myMap)
myMap <- get_map(location=myLocation, source="google", maptype = "satellite", color="bw", crop=FALSE)
ggmap(myMap)
myLocation <- c(-80.82, 43.66, -80.64, 43.77)
myMap <- get_map(location=myLocation, source="google", maptype = "satellite", color="bw", crop=FALSE)
ggmap(myMap)
myMap <- get_map(location=myLocation, source="stamen", maptype = "toner", color="bw", crop=FALSE)
myMap <- get_map(location=myLocation, source="stamen", maptype = "toner", crop=FALSE)
ggmap(myMap)
myLocation <- c(-80.82, 43.66, -80.64, 43.77)
myMap <- get_map(location=myLocation, source="stamen", maptype = "toner", crop=FALSE)
ggmap(myMap)
myMap2 <- get_map(location=myLocation, source="stamen", maptype = "toner", crop=FALSE)
ggmap(myMap2)
?get_map
?get_openstreetmap()
get_openstreetmap(bbox = myLocation, color = "bw")
?get_map
myMap <- get_map(location = myLocation, source = "stamen", maptype = "toner", crop = FALSE)
ggmap(myMap)
ggmap(myMap) + labs(x = "Longitude", y = "Latitude")
library(MAVEn)
maven_raw <- read_maven(maven_datafile = "./maven_output.csv", baseline = T)
devtools::load_all()
setwd("C:/Users/Megan/github_DAPPER/MAVEn/")
devtools::load_all()
maven_raw <- read_maven(maven_datafile = "./maven_output.csv", baseline = T)
plot_maven_overview(maven_raw, maven_experiment = "maven.example1")
plot_maven_overview(maven_raw, maven_experiment = "maven.example1")
