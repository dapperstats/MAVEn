library("rnaturalearth")
library("rnaturalearthdata")
install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel",
"ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata"))
install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel", "ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata"))
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
library(tidyverse)
library(ggplot2)
install.packages(c("ade4TkGUI", "AlgDesign", "amap", "apcluster", "aplpack", "aqp", "arules", "backports", "BART", "basefun", "bayesm", "BB", "BDgraph", "biglasso", "BiocManager", "BiodiversityR", "BMA", "bmixture", "broom", "calibrate", "callr", "car", "CARBayes", "carData", "cartogram", "cartography", "caTools", "chron", "circlize", "classInt", "cleangeo", "cli", "ClusterR", "clusterSim", "coin", "ContaminatedMixt", "covr", "crul", "cubature", "curl", "data.table", "dbscan", "deldir", "dendextend", "deSolve", "devtools", "digest", "doFuture", "doParallel", "DoseFinding", "e1071", "earth", "effects", "ElemStatLearn", "ellipsis", "emmeans", "energy", "extRemes", "factoextra", "FactoMineR", "farver", "fclust", "fields", "foreach", "forecast", "foreign", "fracdiff", "future", "gamair", "gamlss", "gamlss.dist", "gdtools", "gee", "geepack", "geojsonio", "geometa", "geometry", "geonapi", "geosapi", "ggfortify", "ggpubr", "ggsignif", "gld", "GLDEX", "glmnet", "GlobalOptions", "globals", "GMCM", "gmm", "goftest", "grf", "gstat", "h2o", "haven", "HDclassif", "heatmaply", "hexbin", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "icenReg", "igraph", "IMIFA", "indicspecies", "infer", "inlmisc", "installr", "ipdw", "iterators", "JADE", "jomo", "jpeg", "kernlab", "kiwisR", "knitr", "kohonen", "ks", "labdsv", "lambda.r", "landscapemetrics", "later", "lava", "leaflet", "leafpop", "libcoin", "limSolve", "listenv", "loa", "LogicReg", "lpSolve", "magclass", "mapmisc", "maptools", "markdown", "marked", "matrixStats", "MCMCpack", "MetabolAnalyze", "metacom", "mice", "microbenchmark", "miscTools", "missMDA", "MixAll", "mixsmsn", "mlr", "mlt", "mockery", "modelr", "MoEClust", "monomvn", "multcomp", "multicool", "MXM", "ncdf4", "network", "nFactors", "nlme", "oai", "openair", "openxlsx", "ows4R", "ParamHelpers", "partitions", "pbapply", "pbdMPI", "pbdSLAP", "pkgbuild", "pkgconfig", "plm", "plotKML", "plotly", "plotmo", "plotrix", "pls", "plyr", "polycor", "popbio", "postGIStools", "PReMiuM", "primer", "prodlim", "promises", "protolite", "purrr", "pvclust", "quadprog", "quantreg", "R.oo", "R.utils", "R6", "RandomFields", "randomForestSRC", "rangeMapper", "raster", "rasterVis", "Rborist", "Rcmdr", "rcosmo", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppGSL", "RcppParallel", "rebmix", "recipes", "relations", "reticulate", "retistruct", "Rfast", "Rfast2", "rgbif", "rgdal", "rgeos", "rgl", "RgoogleMaps", "rgrass7", "ritis", "rjags", "rje", "rlang", "rlecuyer", "Rmalschains", "RMark", "rmarkdown", "RMAWGEN", "RNetCDF", "RNeXML", "RNifti", "rotl", "roxygen2", "rpart.plot", "RPMG", "rpostgis", "rrcov", "RSNNS", "RSpectra", "RSQLite", "rvest", "RWeka", "RWekajars", "RXshrink", "satellite", "scales", "secr", "segmented", "selectr", "sensitivity", "seqinr", "seriation", "sf", "shiny", "SIS", "slam", "smerc", "sna", "solrium", "sp", "spam", "SparseM", "SpatialExtremes", "SpatialNP", "spatialreg", "spatstat", "spatstat.utils", "spData", "spdep", "spmoran", "spsurvey", "ssgraph", "stars", "stplanr", "strucchange", "SuperLearner", "surveillance", "survival", "synchrony", "sys", "taxize", "tensorflow", "testthat", "tidyr", "tidyverse", "tinytex", "tmap", "trtf", "TTR", "units", "unmarked", "uroot", "vcr", "vegan", "VGAM", "vioplot", "visNetwork", "weathercan", "webmockr", "webshot", "whisker", "wkb", "xfun", "xgboost", "xml2", "zCompositions", "zip"))
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
libryar(tidyverse)
library(tidyverse)
library("ggspatial")
ggplot(data = world) +
geom_sf() +
annotation_scale(location = "bl", width_hint = 0.5) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering) +
coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97))
?annotation_scale
ggplot(data = world) +
geom_sf() +
annotation_scale(location = "bl", width_hint = 0.5) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering) +
coord_sf(xlim = c(-80.82, -80.64), ylim = c(43.66, 43.77))
ggplot(data = world) +
geom_sf(fill= “antiquewhite”) +
geom_text(data= world_points,aes(x=X, y=Y, label=name),
color = “darkblue”, fontface = “bold”, check_overlap = FALSE) +
annotate(geom = “text”, x = -90, y = 26, label = “Gulf of Mexico”, fontface = “italic”, color = “grey22”, size = 6) +
annotation_scale(location = “bl”, width_hint = 0.5) +
annotation_north_arrow(location = “bl”, which_north = “true”, pad_x = unit(0.75, “in”),
pad_y = unit(0.5, “in”), style = north_arrow_fancy_orienteering) +
coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97), expand = FALSE) +
xlab(“Longitude”) +
ylab(“Latitude”) +
ggtitle(“Map of the Gulf of Mexico and the Caribbean Sea”) +
theme(panel.grid.major = element_line(color = gray(.5),
linetype = “dashed”, size = 0.5),
panel.background = element_rect(fill = “aliceblue”))
ggplot(data = world) +
geom_sf(fill= “antiquewhite”) +
geom_text(data= world_points,aes(x=X, y=Y, label=name),
color = “darkblue”, fontface = “bold”, check_overlap = FALSE) +
annotate(geom = “text”, x = -90, y = 26, label = “Gulf of Mexico”, fontface = “italic”, color = “grey22”, size = 6) +
annotation_scale(location = “bl”, width_hint = 0.5) +
annotation_north_arrow(location = “bl”, which_north = “true”, pad_x = unit(0.75, “in”),
pad_y = unit(0.5, “in”), style = north_arrow_fancy_orienteering) +
coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97), expand = FALSE) +
xlab(“Longitude”) +
ylab(“Latitude”) +
ggtitle(“Map of the Gulf of Mexico and the Caribbean Sea”) +
theme(panel.grid.major = element_line(color = gray(.5),
linetype = “dashed”, size = 0.5),
panel.background = element_rect(fill = “aliceblue”))
ggplot(data = world) +
geom_sf(fill= “antiquewhite”)
myLocation <- c(-80.82, 43.66, -80.64, , 43.77)
myMap <- get_map(location=myLocation,
ggmap(myMap)
myLocation <- c(-80.82, 43.66, -80.64, 43.77)
myMap <- get_map(location=myLocation,
myMap <- get_map(location=myLocation, source="stamen", maptype="watercolor", crop=FALSE)
library(ggmap)
myMap <- get_map(location=myLocation, source="stamen", maptype="watercolor", crop=FALSE)
myLocation <- c(-80.82, 43.66, -80.64, 43.77)
myMap <- get_map(location=myLocation, source="stamen", maptype="watercolor", crop=FALSE)
ggmap(myMap)
library("sf")
ggplot(data = world) +
geom_sf(fill= “antiquewhite”)
ggplot(data = world) +
geom_sf(fill= "antiquewhite") +
geom_text(data= world_points,aes(x=X, y=Y, label=name),
color = "darkblue", fontface = "bold", check_overlap = FALSE) +
annotate(geom = "text", x = -90, y = 26, label = "Gulf of Mexico", fontface = "italic", color = "grey22", size = 6) +
annotation_scale(location = "bl", width_hint = 0.5) +
annotation_north_arrow(location = "bl", which_north = "true", pad_x = unit(0.75, "in"),
pad_y = unit(0.5, "in"), style = north_arrow_fancy_orienteering) +
coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97), expand = FALSE) +
xlab("Longitude") +
ylab("Latitude") +
ggtitle("Map of the Gulf of Mexico and the Caribbean Sea") +
theme(panel.grid.major = element_line(color = gray(.5),
linetype = “dashed”, size = 0.5),
panel.background = element_rect(fill = “aliceblue”))
ggplot(data = world) +
geom_sf(fill= "antiquewhite") +
geom_text(data= world_points,aes(x=X, y=Y, label=name),
color = "darkblue", fontface = "bold", check_overlap = FALSE) +
annotate(geom = "text", x = -90, y = 26, label = "Gulf of Mexico", fontface = "italic", color = "grey22", size = 6) +
annotation_scale(location = "bl", width_hint = 0.5) +
annotation_north_arrow(location = "bl", which_north = "true", pad_x = unit(0.75, "in"),
pad_y = unit(0.5, "in"), style = north_arrow_fancy_orienteering) +
coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97), expand = FALSE) +
xlab("Longitude") +
ylab("Latitude") +
ggtitle("Map of the Gulf of Mexico and the Caribbean Sea") +
theme(panel.grid.major = element_line(color = gray(.5),
linetype = "dashed", size = 0.5),
panel.background = element_rect(fill = "aliceblue"))
ggplot(data = world) +
geom_sf(fill= "antiquewhite") +
#geom_text(data= world_points,aes(x=X, y=Y, label=name),
#          color = "darkblue", fontface = "bold", check_overlap = FALSE) +
annotate(geom = "text", x = -90, y = 26, label = "Gulf of Mexico", fontface = "italic", color = "grey22", size = 6) +
annotation_scale(location = "bl", width_hint = 0.5) +
annotation_north_arrow(location = "bl", which_north = "true", pad_x = unit(0.75, "in"),
pad_y = unit(0.5, "in"), style = north_arrow_fancy_orienteering) +
coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97), expand = FALSE) +
xlab("Longitude") +
ylab("Latitude") +
ggtitle("Map of the Gulf of Mexico and the Caribbean Sea") +
theme(panel.grid.major = element_line(color = gray(.5),
linetype = "dashed", size = 0.5),
panel.background = element_rect(fill = "aliceblue"))
ggmap(myMap) +
annotation_scale(location = "bl", width_hint = 0.5) +
annotation_north_arrow(location = "bl", which_north = "true", pad_x = unit(0.75, "in"),
pad_y = unit(0.5, "in"), style = north_arrow_fancy_orienteering)
myMap
p <- ggmap(myMap) +
annotation_scale(location = "bl", width_hint = 0.5) +
geom_sf(fill= "antiquewhite") +
annotation_north_arrow(location = "bl", which_north = "true", pad_x = unit(0.75, "in"),
pad_y = unit(0.5, "in"), style = north_arrow_fancy_orienteering)
p <- ggmap(myMap)
p+ annotation_scale(location = "bl", width_hint = 0.5) +
geom_sf(fill= "antiquewhite") +
annotation_north_arrow(location = "bl", which_north = "true", pad_x = unit(0.75, "in"),
pad_y = unit(0.5, "in"), style = north_arrow_fancy_orienteering)
p
p+ annotation_scale(location = "bl", width_hint = 0.5)
?rnaturalearth
?rnaturalearthdata
myMap <- get_map(location=myLocation, source="osm", crop=FALSE)
ggmap(myMap)
myMap <- get_map(location=myLocation, source="osm", crop=FALSE)
ggmap(myMap)
myMap <- get_map(location=myLocation, source="osm", source=“osm", color=“bw”, crop=FALSE)
myMap <- get_map(location=myLocation, source="osm", color="bw", crop=FALSE)
ggmap(myMap)
myMap <- get_map(location=myLocation, source="google", maptype = "satellite", color="bw", crop=FALSE)
ggmap(myMap)
myLocation <- c(-80.82, 43.66, -80.64, 43.77)
myMap <- get_map(location=myLocation, source="google", maptype = "satellite", color="bw", crop=FALSE)
ggmap(myMap)
myMap <- get_map(location=myLocation, source="stamen", maptype = "toner", color="bw", crop=FALSE)
myMap <- get_map(location=myLocation, source="stamen", maptype = "toner", crop=FALSE)
ggmap(myMap)
myLocation <- c(-80.82, 43.66, -80.64, 43.77)
myMap <- get_map(location=myLocation, source="stamen", maptype = "toner", crop=FALSE)
ggmap(myMap)
myMap2 <- get_map(location=myLocation, source="stamen", maptype = "toner", crop=FALSE)
ggmap(myMap2)
?get_map
?get_openstreetmap()
get_openstreetmap(bbox = myLocation, color = "bw")
?get_map
myMap <- get_map(location = myLocation, source = "stamen", maptype = "toner", crop = FALSE)
ggmap(myMap)
ggmap(myMap) + labs(x = "Longitude", y = "Latitude")
library(MAVEn)
maven_raw <- read_maven(maven_datafile = "./maven_output.csv", baseline = T)
devtools::load_all()
setwd("C:/Users/Megan/github_DAPPER/MAVEn/")
devtools::load_all()
maven_raw <- read_maven(maven_datafile = "./maven_output.csv", baseline = T)
plot_maven_overview(maven_raw, maven_experiment = "maven.example1")
plot_maven_overview(maven_raw, maven_experiment = "maven.example1")
devtools::install()
devtools::build(vignettes = F)
devtools::check(vignettes = F)
devtools::use_testthat()
usethis::use_testthat()
devtools::test()
devtools::use_test()
usethis::use_test()
?read.csv
?rename
?file.path
devtools::document()
usethis::use_package("magrittr")
?append
?which
?nrow
?ceiling
?tail
devtools::document()
?left_join
devtools::document()
devtools::document()
devtools::document()
?median
?sd
?sqrt
?mean
?qt
devtools::document()
?write.csv
?median
?mea
?mean
devtools::document()
devtools::document()
devtools::document()
?dir.create
?dir.exists
devtools::document()
devtools::load_all(".")
usethis::use_test()
read_maven()
test.out<-read_maven()
str(test.out)
expect_match(test.out$Chamber, 0)
expect_length(test.out$Chamber, 0)
devtools::test()
maven_raw <- read_maven(maven_datafile = "./maven_output.csv", baseline = T)
plot_maven_overview(maven_raw, maven_experiment = "maven.example1")
devtools::document()
devtools::load_all(".")
maven_raw <- read_maven(maven_datafile = "./maven_output.csv", baseline = T)
plot_maven_overview(maven_raw, maven_experiment = "maven.example1")
devtools::document()
maven_raw <- read_maven(maven_datafile = "./maven_output.csv", baseline = T)
devtools::load_all(".")
maven_raw <- read_maven(maven_datafile = "./maven_output.csv", baseline = T)
plot_maven_overview(maven_raw, maven_experiment = "maven.example1")
maven <- read_maven(maven_datafile = "./maven_output.csv", baseline = F)
maven.cycle <- assign_cyclenumber(maven)
animal_metabolism <- extract_metabolism(maven.cycle)
animal_metabolism
metablism_trend(animal_metabolism, maven_experiment = "maven.example1")
devtools::document()
devtools::load_all(".")
maven <- read_maven(maven_datafile = "./maven_output.csv", baseline = F)
maven.cycle <- assign_cyclenumber(maven)
animal_metabolism <- extract_metabolism(maven.cycle)
metablism_trend(animal_metabolism, maven_experiment = "maven.example1")
metabolism_summary_cycle <- summarize_metabolism(animal_metabolism,
type = "by_cycle")
metabolism_summary_chamber <- summarize_metabolism(animal_metabolism,
type = "by_chamber")
metabolism_diag(maven_raw, metabolism_summary_cycle,
maven_experiment = "maven.example1")
devtools::document()
devtools::load_all(".")
maven <- read_maven(maven_datafile = "./maven_output.csv", baseline = F)
maven.cycle <- assign_cyclenumber(maven)
animal_metabolism <- extract_metabolism(maven.cycle)
metablism_trend(animal_metabolism, maven_experiment = "maven.example1")
metabolism_summary_cycle <- summarize_metabolism(animal_metabolism,
type = "by_cycle")
metabolism_summary_chamber <- summarize_metabolism(animal_metabolism,
type = "by_chamber")
metabolism_diag(maven_raw, metabolism_summary_cycle,
maven_experiment = "maven.example1")
maven_raw <- read_maven(maven_datafile = "./maven_output.csv", baseline = T)
metabolism_diag(maven_raw, metabolism_summary_cycle,
maven_experiment = "maven.example1")
devtools::load_all(".")
metabolism_diag(maven_raw, metabolism_summary_cycle,
maven_experiment = "maven.example1")
animal_activity <- extract_activity(maven.cycle, metabolism_summary_cycle,
interval = 60, activity_baseline = 0.01)
activity_trend(animal_activity, maven_experiment = "maven.example1")
# Step 7: Generate animal activity summary tables ----
#
# There is currently no calculation for the abs difference sum, but that can be
# added into the pipeline.
activity_summary_cycle <- summarize_activity(animal_activity,
type = "by_cycle",
activity_threshold = 1)
activity_summary_chamber <- summarize_activity(animal_activity,
type = "by_chamber")
# Step 8: Visual diagnostic of animal activity ----
activity_diag(maven_raw, metabolism_summary_cycle, activity_summary_cycle,
maven_experiment = "maven.example1", interval = 60)
devtools::document()
devtools::load_all(".")
# Step 8: Visual diagnostic of animal activity ----
activity_diag(maven_raw, metabolism_summary_cycle, activity_summary_cycle,
maven_experiment = "maven.example1", interval = 60)
devtools::document()
devtools::load_all(".")
# Step 8: Visual diagnostic of animal activity ----
activity_diag(maven_raw, metabolism_summary_cycle, activity_summary_cycle,
maven_experiment = "maven.example1", interval = 60)
test.out <- maven_datatable(metabolism_summary_cycle, activity_summary_cycle,
maven_experiment = "maven.example1")
devtools::load_all(".")
## Complete analysis workflow ----
evaluate_maven(maven_datafile = "maven_output.csv",
maven_experiment = "test.evaluate",
activity_baseline = 0.01, activity_threshold = 1)
devtools::install()
library(MAVEn)
devtools::build()
library(MAVEn)
devtools::build(vignettes = F)
devtools::check(vignettes = F)
devtools::check(vignettes = F)
devtools::check(vignettes = F)
devtools::check(vignettes = F)
devtools::document()
devtools::document()
devtools::document()
devtools::install()
.Last.error.trace
devtools::document()
devtools::install()
devtools::build(vignettes = F)
devtools::check(vignettes = F)
devtools::document()
devtools::install()
devtools::build(vignettes = F)
devtools::check(vignettes = F)
devtools::document()
devtools::check(vignettes = F)
devtools::document()
devtools::check(vignettes = F)
devtools::document()
devtools::install()
devtools::build(vignettes = F)
devtools::check(vignettes = F)
library(MAVEn)
## Evaluate the experimental timecourse ----
maven_raw <- read_maven(datadir = "data", maven_datafile = "./maven_output.csv", baseline = T)
setwd("C:/Users/Megan/github_DAPPER/MAVEn")
library(MAVEn)
## Evaluate the experimental timecourse ----
maven_raw <- read_maven(datadir = "data", maven_datafile = "./maven_output.csv", baseline = T)
plot_maven_overview(maven_raw, maven_experiment = "maven.example1")
devtools::build_vignettes()
?MAVEn
library(MAVEn)
devtools::build_vignettes()
devtools::document()
devtools::install()
library(MAVEn)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
#' @param maven_datafile name of data file to be evaluated. Must be ".csv".
#' @param maven_experiment name of experiment
#' @param interval specified interval for activity calculations. Must be in secoonds and defaults to 60.
#' @param activity_baseline Activity measurement baseline. Used to exclude values from dataset.
#' @param activity_threshold Activity threshold used for calculating activity status (e.g. inactive vs. active)
#' @param figures figures to be produced. Select from "overview", "diag", or "trend". Supply all three in list if you want all to be created.
#'
#' @return
#' @export
#'
evaluate_maven <- function(datadir = "", outdir = "",
maven_datafile = "./maven_output.csv",
maven_experiment = "",
interval = 60,
activity_baseline = 0.01,
activity_threshold = 1,
figures = c("trend","diag","overview")){
fpath <- file.path(outdir)
if(!dir.exists(fpath)){
dir.create(fpath)
}
# Load data
maven_raw <- read_maven(datadir = datadir,
maven_datafile = maven_datafile, baseline = T)
maven <- read_maven(datadir = datadir,
maven_datafile = maven_datafile, baseline = F)
# assign a cycle
maven.cycle <- assign_cyclenumber(maven)
# animal metabolism
animal_metabolism <- extract_metabolism(maven.cycle)
metabolism_summary_cycle <- summarize_metabolism(animal_metabolism,
type = "by_cycle")
#animal activity
animal_activity <- extract_activity(maven.cycle, metabolism_summary_cycle,
interval = interval,
activity_baseline = activity_baseline)
activity_summary_cycle <- summarize_activity(animal_activity,
type = "by_cycle",
activity_threshold =
activity_threshold)
if ("overview" %in% figures) {
plot_maven_overview(maven_raw, maven_experiment = maven_experiment)
}
if ("trend" %in% figures){
metablism_trend(animal_metabolism, maven_experiment = maven_experiment)
activity_trend(animal_activity, maven_experiment = maven_experiment)
}
if ("diag" %in% figures){
metabolism_diag(maven_raw, metabolism_summary_cycle,
maven_experiment = maven_experiment)
activity_diag(maven_raw, metabolism_summary_cycle,
activity_summary_cycle,
maven_experiment = maven_experiment,
interval = interval)
}
# final data table
out <- maven_datatable(outdir = outdir,
metabolism_summary_cycle, activity_summary_cycle,
maven_experiment = maven_experiment)
return(out)
}
devtools::build_vignettes()
devtools::build()
devtools::check()
library(pander)
devtools::load_all()
maven_raw <- read_maven(datadir = "../data",
maven_datafile = "./maven_output.csv", baseline = T)
setwd("C:/Users/Megan/github_DAPPER/MAVEn/vignettes")
maven_raw <- read_maven(datadir = "../data",
maven_datafile = "./maven_output.csv", baseline = T)
pander(head(maven_raw), split.cells = Inf)
plot_maven_overview(maven_raw, maven_experiment = "maven.example1")
metablism_trend(animal_metabolism, maven_experiment = "maven.example1")
animal_metabolism <- extract_metabolism(maven.cycle)
maven.cycle <- assign_cyclenumber(maven)
maven <- read_maven(datadir = "../data",
maven_datafile = "./maven_output.csv", baseline = F)
maven.cycle <- assign_cyclenumber(maven)
animal_metabolism <- extract_metabolism(maven.cycle)
metablism_trend(animal_metabolism, maven_experiment = "maven.example1")
p <- metablism_trend(animal_metabolism, maven_experiment = "maven.example1")
p + scale_color_brewer(palette = "Dark2") + theme_bw()
library(ggplot2)
p + scale_color_brewer(palette = "Dark2") + theme_bw()
#'
#' @importFrom magrittr %>%
#' @importFrom dplyr mutate
#' @importFrom ggplot2 ggplot aes geom_line facet_wrap labs scale_color_viridis_d theme ggsave
#'
#' @return
#' @export
#'
#' @examples #metablism_trend(animal_metabolism, outdir = "output",
#' #out_filename = "", out_filetype = ".png")
metabolism_trend <- function(animal_metabolism, maven_experiment = "",
outdir = "output", out_filename = "MetabolismTrends",
out_filetype = ".png") {
p <- ggplot(data = animal_metabolism %>%
mutate(result = co2_convertion(result)),
aes(x = measurement_number, y = result, col = cycle)) +
geom_line(size = 2) +
facet_wrap(~ Chamber, scales = "free_y") +
labs(title = "Animal Metabolism Trends",
x = "Measurement Time",
y = expression(CO[2] ~ (mu * L ~ h^-1)),
caption = maven_experiment) +
scale_color_viridis_d(option = "D", begin = 0.2, end = 0.8) +
theme(legend.position = "bottom",
plot.title.position = "plot",
plot.caption.position =  "plot")
outpath <- file.path(outdir,
out_filename = paste0(Sys.Date(),"_",maven_experiment, "_",
out_filename, out_filetype))
ggsave(p, filename = outpath, dpi = 300, scale = 1.5,
width = 7, height = 4)
return(p)
}
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
devtools::build()
devtools::check()
R.version
R.Version()
R.version.string
devtools::check()
devtools::install()
devtools::build()
devtools::build()
?install.packages
devtools::build()
devtools::build()
!is.NULL
devtools::document()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::build_vignettes()
library(MAVEn)
devtools::load_all("C:/Users/Megan/github_DAPPER/MAVEn")
library(MAVEn)
devtools::load_all("C:/Users/Megan/github_DAPPER/MAVEn")
devtools::document()
devtools::document()
devtools::install()
devtools::build()
devtools::check()
devtools::build_vignettes()
devtools::build_vignettes()
library(MAVEn)
